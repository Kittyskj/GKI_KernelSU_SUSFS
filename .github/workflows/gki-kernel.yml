name: GKI Kernel Build
permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions

on:
  workflow_call: # This allows this workflow to be called from another workflow
    inputs:
      make_release:
        required: true
        type: boolean
        default: true
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      sub_level:
        required: true
        type: string
      os_patch_level:
        required: true
        type: string
      kernelsu_variant:
        required: true
        type: string
      kernelsu_branch:
        required: true
        type: string
      # kernelsu_branch_other:
      #   required: false
      #   type: string
      revision:
        required: false
        type: string
      version:
        required: false
        type: string
      use_zram:
        required: true
        type: boolean
        default: true
      use_kpm:
        required: true
        type: boolean
        default: true
      supp_op:
        required: true
        type: boolean
        default: false
jobs:
  build-kernel-kernelsu-susfs:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-swapfile: 'true'
          remove-cached-tools: 'false'
          verbose: 'true'

      - name: Set CONFIG environment variable
        run: |
          CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG set to: $CONFIG"

      - name: Install ccache
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y ccache python3 git curl

      - name: Configure ccache
        run: |
          mkdir -p ~/.cache/bazel
          ccache --version
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: Restore ccache from cache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}-ccache-

      - name: Cache toolchain
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: |
            kernel-build-tools
            mkbootimg
          key: toolchain-${{ runner.os }}-v1

      - name: Download toolchain (if cache not found)
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg

      - name: Set Environment Variables
        run: |
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV

      - name: Key Setup
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
            openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
            echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV

      - name: Install repo tool
        run: |
          mkdir -p ./git-repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Clone AnyKernel3 and other dependencies
        run: |
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          git clone https://github.com/WildPlusKernel/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://github.com/ShirkNeko/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/WildPlusKernel/kernel_patches.git
          git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git

      - name: Initialize and Sync Kernel Source
        run: |
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.os_patch_level }}"
          $REPO init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH} --repo-rev=v2.16
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${FORMATTED_BRANCH})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          if grep -q deprecated <<< $REMOTE_BRANCH; then
            echo "Found deprecated branch: $FORMATTED_BRANCH"
            sed -i "s/\"${FORMATTED_BRANCH}\"/\"deprecated\/${FORMATTED_BRANCH}\"/g" $DEFAULT_MANIFEST_PATH
          fi
          $REPO --trace sync -c -j$(nproc --all) --no-tags --fail-fast
          echo "REMOTE_BRANCH=$REMOTE_BRANCH" >> $GITHUB_ENV
          FORMATTED_BRANCH_SHORT="${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          if grep -q deprecated <<< "$REMOTE_BRANCH" && \
             { [ "$FORMATTED_BRANCH_SHORT" == "android13-5.15" ] && \
               [ ${{ inputs.sub_level }} -lt 123 ]; }; then
            echo 'Fix for 5.15 legacy C library BUG'
            cd ./common
            curl -LSs https://github.com/zzh20188/GKI_KernelSU_SUSFS/raw/refs/heads/legacy/fix_5.15.legacy -o fix_5.15.legacy.patch
            patch -p1 < fix_5.15.legacy.patch
          fi

      - name: Enable GKI on OnePlus 8E platform
        if: ${{ inputs.supp_op }}
        run: |
          cd "$CONFIG/common/drivers/"
          curl -LSs "https://github.com/zzh20188/GKI_KernelSU_SUSFS/raw/refs/heads/dev/hmbird_patch.c" -o hmbird_patch.c
          if [ ! -f hmbird_patch.c ]; then
            echo "hmbird_patch.c download failed"
            exit 1
          fi
          echo "obj-y += hmbird_patch.o" >> Makefile
      
      - name: Determine KernelSU branch
        run: |
          # The values in 'case' must match the English inputs from the calling workflow
          case "${{ inputs.kernelsu_branch }}" in
            "Stable(Standard)")
              echo "BRANCH=-s susfs-main" >> $GITHUB_ENV
              ;;
            "Dev(Development)")
              case "${{ inputs.kernelsu_variant }}" in
                "Official" | "MKSU") echo "BRANCH=-s main" >> $GITHUB_ENV ;;
                "Next")              echo "BRANCH=-s next-susfs-dev" >> $GITHUB_ENV ;;
                "SukiSU")           echo "BRANCH=-s susfs-test" >> $GITHUB_ENV ;;
                *) 
                  echo "Error: Undefined development branch variant '${{ inputs.kernelsu_variant }}'" >&2
                  exit 1
                  ;;
              esac
              ;;
            *)
              echo "Error: Unknown branch type '${{ inputs.kernelsu_branch }}' or parameter missing" >&2
              exit 1
              ;;
          esac

      - name: Add KernelSU
        run: |
          cd "$CONFIG"
          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash $BRANCH
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash $BRANCH
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash $BRANCH
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash $BRANCH
          fi

      - name: Install SUSFS patch for KernelSU variant
        run: |
          cd "$CONFIG"
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            cd ./KernelSU
            cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
             cd ./KernelSU-Next
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
             cd ./KernelSU
            cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true
            cp ../../kernel_patches/mksu/mksu_susfs.patch ./
            patch -p1 < mksu_susfs.patch || true
            cp ../../kernel_patches/mksu/fix.patch ./
            patch -p1 < fix.patch || true
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
             cd ./KernelSU
          else
            echo "Invalid KernelSU variant selected!"
            exit 1
          fi
          cd ../common
          FORMATTED_BRANCH_SHORT="${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          if grep -q deprecated <<< "$REMOTE_BRANCH" && \
             { [ "$FORMATTED_BRANCH_SHORT" == "android12-5.10" ] && \
               [ ${{ inputs.sub_level }} -lt 136 ]; }; then
            patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true
            curl -LSs https://github.com/zzh20188/GKI_KernelSU_SUSFS/raw/refs/heads/legacy/fdinfo.c.patch -o fdinfo.c.patch
            patch -p1 < fdinfo.c.patch
          else
            patch -p1 --fuzz=3 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true
          fi
  
      - name: Apply new HOOKS patch
        run: |
          cd "$CONFIG/common"
          if [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            cp ../../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./
            patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
            patch -p1 -F 3 < syscall_hooks.patch
          fi

      - name: Copy source files & apply LZ4KD & ZSTDN patch
        if: ${{ inputs.use_zram }}
        run: |
          cd "$CONFIG/common"
          cp -r ../../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
          cp -r ../../SukiSU_patch/other/zram/lz4k/lib/* ./lib/
          cp -r ../../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto/
          cp -r ../../SukiSU_patch/other/zram/lz4k_oplus ./lib/
          cp ../../SukiSU_patch/other/zram/zram_patch/${{ inputs.kernel_version }}/lz4kd.patch ./
          patch -p1 -F 3 < lz4kd.patch || true
          cp ../../SukiSU_patch/other/zram/zram_patch/${{ inputs.kernel_version }}/lz4k_oplus.patch ./
          patch -p1 -F 3 < lz4k_oplus.patch || true

      - name: Apply patch to hide certain feature
        run: |
          cd "$CONFIG/common"
          if [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            cp ../../SukiSU_patch/69_hide_stuff.patch ./
            patch -p1 -F 3 < 69_hide_stuff.patch
          else
            cp ../../kernel_patches/69_hide_stuff.patch ./
            patch -p1 -F 3 < 69_hide_stuff.patch
          fi

      - name: LZ4KD & Lz4k_oplus Configuration
        if: ${{ inputs.use_zram }}
        run: |
          CONFIG_FILE="$CONFIG/common/arch/arm64/configs/gki_defconfig"
          if [ "${{ inputs.kernel_version }}" = "5.10" ]; then
            echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
            echo "CONFIG_ZRAM=y" >> "$CONFIG_FILE"
            echo "CONFIG_MODULE_SIG=n" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZO=y" >> "$CONFIG_FILE"
            echo "CONFIG_ZRAM_DEF_COMP_LZ4KD=y" >> "$CONFIG_FILE"
          fi
          if [ "${{ inputs.kernel_version }}" != "6.6" ] && [ "${{ inputs.kernel_version }}" != "5.10" ]; then
            if grep -q "CONFIG_ZSMALLOC" -- "$CONFIG_FILE"; then
                sed -i 's/CONFIG_ZSMALLOC=m/CONFIG_ZSMALLOC=y/g' "$CONFIG_FILE"
            else
                echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
            fi
            sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
          fi
          if [ "${{ inputs.kernel_version }}" = "6.6" ]; then
            echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
            sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
          fi
          if [ "${{ inputs.android_version }}" = "android14" ] || [ "${{ inputs.android_version }}" = "android15" ]; then
            sed -i 's/"drivers\/block\/zram\/zram\.ko",//g; s/"mm\/zsmalloc\.ko",//g' "$CONFIG/common/modules.bzl"
            echo "CONFIG_MODULE_SIG_FORCE=n" >> "$CONFIG_FILE"
          fi
          if grep -q "CONFIG_ZSMALLOC=y" "$CONFIG_FILE" && grep -q "CONFIG_ZRAM=y" "$CONFIG_FILE"; then
            echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> "$CONFIG_FILE"
            echo "CONFIG_ZRAM_WRITEBACK=y" >> "$CONFIG_FILE"
          fi

      - name: Set BBR as default congestion algorithm
        if: ${{ inputs.set_defbbr }}
        run: |
          CONFIG_FILE="$CONFIG/common/arch/arm64/configs/gki_defconfig"
          echo "CONFIG_DEFAULT_BBR=y" >> "$CONFIG_FILE"
           
      - name: Add SUSFS configuration settings
        run: |
          CONFIG_FILE="$CONFIG/common/arch/arm64/configs/gki_defconfig"
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
          if [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "CONFIG_KSU_KPROBES_HOOK=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          fi
          echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_FQ=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BIC=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "$CONFIG_FILE"

      - name: Apply Performance and Power Optimizations
        run: |
          CONFIG_FILE="$CONFIG/common/arch/arm64/configs/gki_defconfig"
          echo "Applying performance and power saving settings to $CONFIG_FILE..."
          
          echo "" >> "$CONFIG_FILE"
          echo "#" >> "$CONFIG_FILE"
          echo "# Performance and Power Optimizations" >> "$CONFIG_FILE"
          echo "#" >> "$CONFIG_FILE"
          
          # --- Performance Optimizations ---
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> "$CONFIG_FILE"
          echo "# CONFIG_CC_OPTIMIZE_FOR_SIZE is not set" >> "$CONFIG_FILE"
          
          # --- Power Saving Optimizations ---
          echo "CONFIG_POWER_EFFICIENT_WORKQUEUES=y" >> "$CONFIG_FILE"
          echo "CONFIG_CPU_IDLE=y" >> "$CONFIG_FILE"
          echo "CONFIG_CPU_FREQ_GOV_SCHEDUTIL=y" >> "$CONFIG_FILE"
          echo "CONFIG_NO_HZ_IDLE=y" >> "$CONFIG_FILE"
          echo "# CONFIG_NO_HZ_FULL is not set" >> "$CONFIG_FILE"
          echo "CONFIG_HZ_PERIODIC=n" >> "$CONFIG_FILE"

          # --- Compilation-level Optimizations (LTO) ---
          # Enables Link-Time Optimization for better performance and smaller binary size.
          echo "CONFIG_LTO_CLANG=y" >> "$CONFIG_FILE"
          
          # --- Advanced Optimizations ---
          echo "" >> "$CONFIG_FILE"
          echo "#" >> "$CONFIG_FILE"
          echo "# Advanced memory, scheduler, and I/O optimizations" >> "$CONFIG_FILE"
          echo "#" >> "$CONFIG_FILE"
          echo "CONFIG_KSM=y" >> "$CONFIG_FILE" # Kernel Samepage Merging
          echo "CONFIG_ZPOOL=y" >> "$CONFIG_FILE"
          echo "CONFIG_ZBUD=y" >> "$CONFIG_FILE"
          echo "# CONFIG_SCHED_AUTOGROUP is not set" >> "$CONFIG_FILE"
          echo "CONFIG_IRQ_FORCED_THREADING=y" >> "$CONFIG_FILE"
          echo "CONFIG_FSCACHE=y" >> "$CONFIG_FILE"
          # io_uring is supported in modern kernels (5.10+) and provides high-performance async I/O
          echo "CONFIG_IO_URING=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_EMATCH=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_CLS_ACT=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_INGRESS=y" >> "$CONFIG_FILE"
          
          # --- Disable Debugging Overhead ---
          echo "" >> "$CONFIG_FILE"
          echo "#" >> "$CONFIG_FILE"
          echo "# Disable debugging overhead for production builds" >> "$CONFIG_FILE"
          echo "#" >> "$CONFIG_FILE"
          echo "# CONFIG_DEBUG_KERNEL is not set" >> "$CONFIG_FILE"
          echo "# CONFIG_DEBUG_INFO is not set" >> "$CONFIG_FILE"
          echo "# CONFIG_SCHED_DEBUG is not set" >> "$CONFIG_FILE"
          echo "# CONFIG_LOCKUP_DETECTOR is not set" >> "$CONFIG_FILE"
          echo "# CONFIG_DETECT_HUNG_TASK is not set" >> "$CONFIG_FILE"
          echo "" >> "$CONFIG_FILE"
