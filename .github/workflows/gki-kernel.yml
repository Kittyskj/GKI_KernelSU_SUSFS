name: GKI Kernel Build
permissions:
  contents: write
  actions: write
on:
  workflow_call:
    inputs:
      make_release:
        required: true
        type: boolean
        default: true
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      sub_level:
        required: true
        type: string
      os_patch_level:
        required: true
        type: string
      kernelsu_variant:
        required: true
        type: string
      kernelsu_branch:
        required: true
        type: string
      revision:
        required: false
        type: string
      version:
        required: false
        type: string
      use_zram:
        required: true
        type: boolean
        default: true
      use_kpm:
        required: true
        type: boolean
        default: true
      supp_op:
        required: true
        type: boolean
        default: false
jobs:
  build-kernel-kernelsu-susfs:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      KCFLAGS: >-
        -Oz
        -fno-unroll-loops
        -fno-inline
        -fno-inline-small-functions
        -fno-inline-functions-called-once
        -fno-aggressive-loop-optimizations
        -fno-tree-vectorize
        -fno-schedule-insns
        -fno-schedule-insns2
        -fno-predictive-commoning
        -fno-reorder-blocks
        -fno-ipa-cp
        -fno-caller-saves
        -fno-peel-loops
        -fno-version-loops-for-strides
        -fno-tree-slp-vectorize
        -fno-section-anchors
        -mllvm -inline-threshold=0
        -mllvm -enable-loop-unrolling=false
        -mllvm -enable-misched=false
        -mllvm -disable-llvm-optzns
        -mllvm -enable-slp-vectorization=false
    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-swapfile: 'true'
          remove-cached-tools: 'false'
          verbose: 'true'
      - name: 设定 CONFIG 环境变量
        run: |
          CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG set to: $CONFIG"
      - name: 安装 ccache
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y ccache python3 git curl
      - name: 配置 ccache
        run: |
          mkdir -p ~/.cache/bazel
          ccache --version
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
      - name: 从缓存中还原ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}-ccache-
      - name: 缓存工具链
        id: cache-toolchain
        uses: actions-cache@v4
        with:
          path: |
            kernel-build-tools
            mkbootimg
          key: toolchain-${{ runner.os }}-v1
      - name: 下载工具链（如果未找到缓存）
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg
      - name: 设置环境变量
        run: |
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
      - name: 密钥设置——已经过mkppk修改
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
          echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
      - name: 安装仓库
        run: |
          mkdir -p ./git-repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV
      - name: 克隆 AnyKernel3 和其他依赖项
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"
          git clone https://github.com/WildPlusKernel/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://github.com/ShirkNeko/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/WildPlusKernel/kernel_patches.git
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
      - name: 初始化和同步内核源代码
        run: |
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.os_patch_level }}"
          $REPO init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH} --repo-rev=v2.16
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${FORMATTED_BRANCH})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          if grep -q deprecated <<< $REMOTE_BRANCH; then
            sed -i "s/\"${FORMATTED_BRANCH}\"/\"deprecated/${FORMATTED_BRANCH}\"/g" $DEFAULT_MANIFEST_PATH
          fi
          $REPO --trace sync -c -j$(nproc --all) --no-tags --fail-fast
          echo "REMOTE_BRANCH=$REMOTE_BRANCH" >> $GITHUB_ENV
      - name: 使GKI在一加8E平台正常使用
        if: ${{ inputs.supp_op }}
        run: |
          cd "$CONFIG/common/drivers/"
          curl -LSs "https://github.com/zzh20188/GKI_KernelSU_SUSFS/raw/refs/heads/dev/hmbird_patch.c" -o hmbird_patch.c
          echo "obj-y += hmbird_patch.o" >> Makefile
      - name: 确定 KernelSU 的分支
        run: |
          branch_input="${{ inputs.kernelsu_branch }}"
          variant_input="${{ inputs.kernelsu_variant }}"
          case "$branch_input" in
            "Stable(标准)") echo "BRANCH=-s susfs-main" >> $GITHUB_ENV ;;  
            "Dev(开发)")  
              case "$variant_input" in
                "Official"|"MKSU") echo "BRANCH=-s main" >> $GITHUB_ENV ;; 
                "Next") echo "BRANCH=-s next-susfs-dev" >> $GITHUB_ENV ;; 
                "SukiSU") echo "BRANCH=-s susfs-test" >> $GITHUB_ENV ;; 
                *) exit 1 ;;  
              esac ;; 
            *) exit 1 ;; 
          esac
      - name: 添加 KernelSU
        run: |
          cd "$CONFIG"
          if [[ "${{ inputs.kernelsu_variant }}" == "Official" ]]; then
            curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash $BRANCH
          elif [[ "${{ inputs.kernelsu_variant }}" == "Next" ]]; then
            curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash $BRANCH
          elif [[ "${{ inputs.kernelsu_variant }}" == "MKSU" ]]; then
            curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash $BRANCH
          elif [[ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]]; then
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash $BRANCH
          fi
      - name: 为 KernelSU 变体安装 SUSFS 补丁
        run: |
          cd "$CONFIG"
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          if [[ "${{ inputs.kernelsu_variant }}" == "Official" ]]; then
            cd ./KernelSU
            cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch
          fi
      - name: 应用新的HOOKS补丁
        run: |
          cd "$CONFIG/common"
          if [[ "${{ inputs.kernelsu_variant }}" == "Next" ]]; then
            cp ../../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./
            patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch
          elif [[ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]]; then
            cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
            patch -p1 -F 3 < syscall_hooks.patch
          fi
      - name: 复制源文件 & 应用LZ4KD & ZSTDN补丁
        if: ${{ inputs.use_zram }}
        run: |
          cd "$CONFIG/common"
          cp -r ../../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
          cp -r ../../SukiSU_patch/other/zram/lz4k/lib/* ./lib/
          cp -r ../../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto/
          cp -r ../../SukiSU_patch/other/zram/lz4k_oplus ./lib/
          cp ../../SukiSU_patch/other/zram/zram_patch/${{ inputs.kernel_version }}/lz4kd.patch ./
          patch -p1 -F 3 < lz4kd.patch || true
          cp ../../SukiSU_patch/other/zram/zram_patch/${{ inputs.kernel
          
